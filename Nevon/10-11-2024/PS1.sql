CREATE DATABASE EVENT_FINDER;

USE EVENT_FINDER;

CREATE USER 'student'@'localhost' IDENTIFIED BY 'UA123!';

GRANT ALL PRIVILEGES ON EVENT_FINDER.* TO 'student'@'localhost';

CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY AUTO_INCREMENT,
    F_NAME VARCHAR(30),
    L_NAME VARCHAR(30),
    EMAIL VARCHAR(255),
    PASSWORD VARCHAR(255),
    ORGANIZATION BOOLEAN,
    ADMIN BOOLEAN,
    NOTIFICATIONS BOOLEAN
);

CREATE TABLE CATEGORIES(
    CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORY_NAME VARCHAR(30)
);

CREATE TABLE ZIPCODES(
    ZIPCODE INT PRIMARY KEY,
    LATITUDE FLOAT(10,6),
    LONGITUDE FLOAT(10,6)
);

CREATE TABLE STATUS (
    STATUS_ID INT PRIMARY KEY AUTO_INCREMENT,
    STATUS_DESCR VARCHAR(255)
);

CREATE TABLE EVENTS (
    EVENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    EVENT_NAME VARCHAR(30),
    EVENT_DESCR VARCHAR(255),
    STREET_ADD VARCHAR(255),
    CITY VARCHAR(30),
    ZIPCODE INT,
    CREATOR INT,
    CATEGORY INT,
    DATETIME DATETIME,
    WEBSITE VARCHAR(255),
    FOREIGN KEY (ZIPCODE) REFERENCES ZIPCODES(ZIPCODE),
    FOREIGN KEY (CREATOR) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CATEGORY) REFERENCES CATEGORIES(CATEGORY_ID)
);

CREATE TABLE EVENT_STATUS (
    USER_ID INT,
    EVENT_ID INT,
    STATUS_ID INT,
    PRIMARY KEY (USER_ID, EVENT_ID),  
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),  
    FOREIGN KEY (EVENT_ID) REFERENCES EVENTS(EVENT_ID),  
    FOREIGN KEY (STATUS_ID) REFERENCES STATUS(STATUS_ID)  
);

INSERT INTO STATUS (STATUS_DESCR)
VALUES
('Going'),
('Not Going');

INSERT INTO CATEGORIES(CATEGORY_NAME) VALUES
('Sports'),
('gaming'),
('movies'),
('music'),
('hiking'),
('meetup'),
('studying'),
('pets'),
('meet op'),
('dancing'),
('reading'),
('cosplay'),
('sewing'),
('hiking'),
('sports'),
('quilting'),
('table top'),
('card game');

DELETE C1
FROM CATEGORIES C1
JOIN (
    SELECT CATEGORY_NAME, MIN(CATEGORY_ID) AS MinID
    FROM CATEGORIES
    GROUP BY CATEGORY_NAME
    HAVING COUNT(*) > 1
) C2
ON C1.CATEGORY_NAME = C2.CATEGORY_NAME
AND C1.CATEGORY_ID > C2.MinID;
